<?xml version="1.0" encoding="UTF-8"?>
<?asciidoc-toc maxdepth="4"?>
<?asciidoc-numbered?>
<book xmlns="http://docbook.org/ns/docbook" xmlns:xl="http://www.w3.org/1999/xlink" version="5.0" xml:lang="en">
<info>
<title>jboss-docker-e2e-solution (0.0.1)</title>
<date>2018-08-31 01:18:21 UTC</date>
<author>
<personname>
<firstname>Maksim</firstname>
<surname>Kostromin</surname>
</personname>
<email>daggerok@gmail.com</email>
</author>
<authorinitials>MK</authorinitials>
<revhistory>
<revision>
<revnumber>0.0.1</revnumber>
<date>2018-08-31 01:18:21 UTC</date>
<authorinitials>MK</authorinitials>
</revision>
</revhistory>
</info>
<chapter xml:id="introduction">
<title>Introduction</title>
<simpara>This repository contains end-to-end testing of
legacy system which is basically absolutely doesn&#8217;t
has any tests at all.</simpara>
<simpara>Testing is going base on selenium-hub with chrome node</simpara>
<simpara>Test could be implemented with JUnit 5 and written
using modern languages, like latest fancy java 8/10/11
or Kotlin</simpara>
<simpara>Also we going to bootstrap fresh new oracle
instance before tests</simpara>
<simpara>Read <link xl:href="https://daggerok.github.io/jboss-docker-e2e-solution">project reference documentation</link></simpara>
<simpara>Initially generated by using <link xl:href="https://github.com/daggerok/generator-jvm/">generator-jvm</link> yeoman generator (java-parent-multi-project)</simpara>
</chapter>
<chapter xml:id="implementation">
<title>Implementation</title>
<section xml:id="docker-oracle-jboss-selenium-hub-chrome">
<title>docker (Oracle, JBoss, Selenium Hub + Chrome)</title>
<formalpara>
<title>docker-compose</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./mvnw -pl legacy-java-ee-app

./mvnw -pl docker docker-compose:up
./mvnw -pl docker -P up
./mvnw -pl docker -P tail

./mvnw -pl docker docker-compose:down
./mvnw -pl docker -P down</programlisting>
</para>
</formalpara>
</section>
<section xml:id="project-under-test-legacy-javaee-app-running-in-jboss">
<title>project under test (legacy JavaEE app running in JBoss)</title>
<formalpara>
<title>docker-compose</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./mvnw -pl legacy-java-ee-app clean package docker-compose:up

./mvnw -pl legacy-java-ee-app docker-compose:down</programlisting>
</para>
</formalpara>
</section>
<section xml:id="e2e-tests">
<title>e2e-tests</title>
<formalpara>
<title>1) pull needed images</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">docker pull selenium/hub:3.14.0-beryllium
docker pull selenium/node-chrome-debug:3.14.0-beryllium
docker pull selenium/node-firefox-debug:3.14.0-beryllium</programlisting>
</para>
</formalpara>
<formalpara>
<title>2) run hub and link browser nodes (use <literal>--shm-size=2g</literal> if needed)</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">docker run -d -p 4444:4444 --rm --name selenium-hub selenium/hub:3.14.0-beryllium</programlisting>
</para>
</formalpara>
<formalpara>
<title>3) verify if grid console available</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">open :4444/grid/console
# or
docker logs -f selenium-hub &amp;</programlisting>
</para>
</formalpara>
<formalpara>
<title>4) link browser nodes (use <literal>--shm-size=2g</literal> if needed)</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">docker run -d -P --link selenium-hub:hub --rm --name node-chrome-debug selenium/node-chrome-debug:3.14.0-beryllium
docker logs -f node-chrome-debug &amp;

docker run -d -P --link selenium-hub:hub --rm --name node-firefox-debug selenium/node-firefox-debug:3.14.0-beryllium
docker logs -f node-firefox-debug &amp;</programlisting>
</para>
</formalpara>
<formalpara>
<title>5) finally, run e2e tests</title>
<para>
<programlisting language="bash" linenumbering="unnumbered">./mvnw -DargLine="-Dbrowser=firefox -Drmeote=http://127.0.0.1:4444/wd/hub" test
./mvnw -DargLine="-Dselenide.browser=chrome -Drmeote=http://127.0.0.1:4444/wd/hub" test</programlisting>
</para>
</formalpara>
<note>
<simpara>see docker/docker-compose-selenium-hub.yaml file for detail, how to setup selenium grid</simpara>
</note>
<programlisting language="yaml" linenumbering="unnumbered">version: '2.1'

services:

  selenium-hub:
    image: selenium/hub:3.14.0-beryllium
    ports: ['4444:4444']
    restart: unless-stopped
    networks:
      backing-services:
        aliases:
        - hub
        - selenium-hub
        - hub.daggerok.github.com
        - selenium-hub.daggerok.github.com

  node-chrome-debug:
    image: selenium/node-chrome-debug:3.14.0-beryllium
    depends_on: [selenium-hub]
    environment:
      HUB_HOST: selenium-hub
    ports: ['5900']
    restart: unless-stopped
    networks:
      backing-services:
        aliases:
        - chrome
        - node-chrome-debug
        - chrome.daggerok.github.com
        - node-chrome-debug.daggerok.github.com
    #shm_size: 2g

  node-firefox-debug:
    image: selenium/node-firefox-debug:3.14.0-beryllium
    depends_on: [selenium-hub]
    environment:
      HUB_HOST: selenium-hub
    ports: ['5900']
    restart: unless-stopped
    networks:
      backing-services:
        aliases:
        - firefox
        - node-firefox-debug
        - firefox.daggerok.github.com
        - node-firefox-debug.daggerok.github.com
    #shm_size: 2g

networks:
  backing-services:
    driver: bridge</programlisting>
</section>
<section xml:id="documentation">
<title>documentation</title>
<programlisting language="bash" linenumbering="unnumbered">./mvnw -pl docs</programlisting>
</section>
</chapter>
<chapter xml:id="links">
<title>Links</title>
<itemizedlist>
<listitem>
<simpara><link xl:href="https://github.com/daggerok/jboss-docker-e2e-solution">GitHub repo</link></simpara>
</listitem>
<listitem>
<simpara><link xl:href="https://daggerok.github.io/jboss-docker-e2e-solution">GitHub pages</link></simpara>
</listitem>
</itemizedlist>
</chapter>
</book>